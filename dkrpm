#! /usr/bin/env bash

###############################################################################

APP="dkrpm"
VER="1.5.1"

###############################################################################

NORM=0
BOLD=1
UNLN=4
RED=31
GREEN=32
BROWN=33
BLUE=34
MAG=35
CYAN=36
GREY=37

CL_NORM="\033[${NORM}m"
CL_BOLD="\033[${BOLD}m"
CL_UNLN="\033[${UNLN}m"
CL_RED="\033[${RED}m"
CL_GREEN="\033[${GREEN}m"
CL_BROWN="\033[${BROWN}m"
CL_BLUE="\033[${BLUE}m"
CL_MAG="\033[${MAG}m"
CL_CYAN="\033[${CYAN}m"
CL_GREY="\033[${GREY}m"
CL_BL_RED="\033[${RED};1m"
CL_BL_GREEN="\033[${GREEN};1m"
CL_BL_BROWN="\033[${BROWN};1m"
CL_BL_BLUE="\033[${BLUE};1m"
CL_BL_MAG="\033[${MAG};1m"
CL_BL_CYAN="\033[${CYAN};1m"
CL_BL_GREY="\033[${GREY};1m"
CL_UL_RED="\033[${RED};4m"
CL_UL_GREEN="\033[${GREEN};4m"
CL_UL_BROWN="\033[${BROWN};4m"
CL_UL_BLUE="\033[${BLUE};4m"
CL_UL_MAG="\033[${MAG};4m"
CL_UL_CYAN="\033[${CYAN};4m"
CL_UL_GREY="\033[${GREY};4m"
CL_BG_RED="\033[${RED};7m"
CL_BG_GREEN="\033[${GREEN};7m"
CL_BG_BROWN="\033[${BROWN};7m"
CL_BG_BLUE="\033[${BLUE};7m"
CL_BG_MAG="\033[${MAG};7m"
CL_BG_CYAN="\033[${CYAN};7m"
CL_BG_GREY="\033[${GREY};7m"

###############################################################################

# Main entrypoint to program
main() {
  if [[ ! -t 1 || -n "$no_colors" ]] ; then
    unset NORM BOLD UNLN RED GREEN BROWN BLUE MAG CYAN GREY
    unset CL_NORM CL_BOLD CL_UNLN CL_RED CL_GREEN CL_BROWN CL_BLUE CL_MAG CL_CYAN CL_GREY
    unset CL_BL_RED CL_BL_GREEN CL_BL_BROWN CL_BL_BLUE CL_BL_MAG CL_BL_CYAN CL_BL_GREY
    unset CL_UL_RED CL_UL_GREEN CL_UL_BROWN CL_UL_BLUE CL_UL_MAG CL_UL_CYAN CL_UL_GREY
    unset CL_BG_RED CL_BG_GREEN CL_BG_BROWN CL_BG_BLUE CL_BG_MAG CL_BG_CYAN CL_BG_GREY
  fi

  [[ -n "$version" || -n "$ver" ]] && about && doExit
  [[ -n "$help" || -n "$usage" ]] && usage && doExit
  [[ "$1" == "help" || "$1" == "h" ]] && helpCommand "$2" && doExit

  if ! checkDeps "docker" ; then
    show "For using $APP you must install 'docker' utility first." $RED
    doExit 1
  fi

  local cmd="$1"

  case $cmd in
    "p"|"pack")
      shift
      packCommand "$@" ;;
    "u"|"unpack")
      shift
      unpackCommand "$@" ;;
    "c"|"check")
      shift
      checkCommand "$@" ;;
    "d"|"debug")
      shift
      debugCommand "$@" ;;
    *|"h"|"help")
      shift
      helpCommand "$@" ;;
  esac

  doExit $?
}

###############################################################################

# Prints coloured message to terminal
#
# 1: Message (String)
#
# Code: No
# Echo: No
show() {
  if [[ -n "$2" && -z "$no_colors" ]] ; then
    echo -e "\033[${2}m${1}\033[0m"
  else
    echo -e "$1"
  fi
}

# Checks if programs are installed
#
# *: List of programs (Array)
#
# Code: No
# Echo: No
checkDeps () {
  for app in "$@" ; do
    type "$app" &> /dev/null
    [[ $? -eq 1 ]] && return 1
  done

  return 0
}

# Exits program with a given return code
#
# 1: Exit code (Integer)
#
# Code: No
# Echo: No
doExit() {
  exit "${1-0}"
}

###############################################################################
# Usage
###############################################################################

# Shows about message
#
# Code: No
# Echo: No
about() {
  show ""
  show "${CL_BL_CYAN}$APP${CL_NORM} ${CL_CYAN}$VER${CL_NORM} - Docker-based RPM building utility"
  show ""
  show "Copyright (C) 2009-2017 Gleb E Goncharov <inbox@gongled.ru>" $GREY
  show "MIT" $GREY
  show ""
}

# Shows usage message
#
# Code: No
# Echo: No
usage() {
  show ""
  show "${CL_BOLD}Usage:${CL_NORM} $APP ${CL_BROWN}command${CL_NORM} ${CL_BROWN}image${CL_NORM} ${CL_BROWN}source${CL_NORM} ${CL_GREEN}<option>${CL_NORM}"
  show ""
  show "${CL_BOLD}Commands:${CL_NORM}"
  show ""
  show "  ${CL_BROWN}p${CL_NORM} or ${CL_BROWN}pack${CL_NORM}             Create RPM package from spec file"
  show "  ${CL_BROWN}u${CL_NORM} or ${CL_BROWN}unpack${CL_NORM}           Unpack source files from SRPM package"
  show "  ${CL_BROWN}c${CL_NORM} or ${CL_BROWN}check${CL_NORM}            Validate spec file using Perfecto"
  show "  ${CL_BROWN}d${CL_NORM} or ${CL_BROWN}debug${CL_NORM}            Run shell command instead of RPMBuilder"
  show "  ${CL_BROWN}h${CL_NORM} or ${CL_BROWN}help${CL_NORM}             Show detailed information about command"
  show ""
  show "See \"$APP help ${CL_BROWN}<command>${CL_NORM}\" for information on a specific command."
  show ""
  show "${CL_BOLD}Examples:${CL_NORM}"
  show ""
  show "  $APP pack rpmbuilder:6 htop.spec -V -1"
  show "  $APP unpack rpmbuilder:7 htop-2.0.2-0.el7.src.rpm"
  show "  $APP check rpmbuilder:6 htop.spec"
  show "  $APP debug rpmbuilder:6 htop.spec"
  show ""
}

# Shows usage 'pack' command message
#
# Code: No
# Echo: No
usagePack() {
  show ""
  show "${CL_BOLD}Usage:${CL_NORM} $APP pack <image> <spec> <options>"
  show ""
  show "  Create RPM package from spec file."
  show ""
  show "${CL_BOLD}Examples:${CL_NORM}"
  show ""
  show "  $APP pack rpmbuilder6 htop.spec -V -1"
  show ""
}

# Shows usage 'unpack' command message
#
# Code: No
# Echo: No
usageUnpack() {
  show ""
  show "${CL_BOLD}Usage:${CL_NORM} $APP unpack <image> <srpm>"
  show ""
  show "  Unpack source files from SRPM package."
  show ""
  show "${CL_BOLD}Examples:${CL_NORM}"
  show ""
  show "  $APP unpack rpmbuilder6 htop-2.0.2-0.el7.src.rpm"
  show ""
}

# Shows usage 'check' command message
#
# Code: No
# Echo: No
usageCheck() {
  show ""
  show "${CL_BOLD}Usage:${CL_NORM} $APP check <image> <spec>"
  show ""
  show "  Validate spec file using Perfecto."
  show ""
  show "${CL_BOLD}Examples:${CL_NORM}"
  show ""
  show "  $APP check rpmbuilder6 htop.spec"
  show ""
}

# Shows usage 'debug' command message
#
# Code: No
# Echo: No
usageDebug() {
  show ""
  show "${CL_BOLD}Usage:${CL_NORM} $APP debug <image> <spec>"
  show ""
  show "  Run shell instead of RPMBuilder."
  show ""
  show "${CL_BOLD}Examples:${CL_NORM}"
  show ""
  show "  $APP debug rpmbuilder6 htop.spec"
  show ""
}

# Shows usage 'help' command message
#
# Code: No
# Echo: No
usageHelp() {
  show "\nNothing interesting here.\n"
}

###############################################################################
# Commands
###############################################################################

dockerRun() {
  docker run -e LOCAL_USER_ID="$(id -u)" --rm -it "$@"
  return $?
}

packCommand() {
  local img
  local specpath
  local specdir
  local specname
  local rpmb_img

  img="${1}"
  specpath="${2}"
  specdir="$(cd "$(dirname "$specpath")" && pwd -P)"
  specname=$(basename "$specpath")
  shift 2

  rpmb_img="${img}"

  dockerRun -v "$specdir":/rpmbuilder \
            "$rpmb_img" \
            "/usr/bin/rpmbuilder" \
            "$specname" \
            "$@" 

  return $?
}

debugCommand() {
  local img
  local specpath
  local specdir
  local specname
  local rpmb_img

  img="${1}"
  specpath="${2:-.}"
  specdir="$(cd "$(dirname "$specpath")" && pwd -P)"
  specname=$(basename "$specpath")
  shift 2

  rpmb_img="${img}"

  dockerRun -v "$specdir":/rpmbuilder \
            "$rpmb_img" \
            "/bin/bash"

  return $?
}

unpackCommand() {
  local img
  local srpmpath
  local srpmdir
  local srpmname

  img="${1}"
  srpmpath="${2}"
  srpmdir="$(cd "$(dirname "$srpmpath")" && pwd -P)"
  srpmname=$(basename "$srpmpath")

  shift 2

  local unrpmb_img
  local unrpmb_args

  unrpmb_img="${img}"
  unrpmb_args="."

  shift 2

  dockerRun -v "$srpmdir":/rpmbuilder \
            "$unrpmb_img" \
            "/usr/bin/rpmunbuilder" \
            "$srpmname" \
            "$unrpmb_args"

  return $?
}

checkCommand() {
  local img
  local specpath
  local specdir
  local specname
  local perfecto_img

  img="${1}"
  specpath="${2}"
  specdir="$(cd "$(dirname "$specpath")" && pwd -P)"
  specname=$(basename "$specpath")
  shift 2

  perfecto_img="${img}"

  dockerRun -v "$specdir":/rpmbuilder \
            "$perfecto_img" \
            "/usr/bin/perfecto" \
            "$specname" \
            "$@"

  return $?
}

helpCommand() {
  if [[ -z "$1" ]] ; then
    usage
    doExit
  fi

  case $1 in
    "p"|"pack")              usagePack "$@" ;;
    "u"|"unpack")            usageUnpack "$@" ;;
    "c"|"check")             usageCheck "$@" ;;
    "d"|"debug")             usageDebug "$@" ;;
    "h"|"help")              usageHelp ;;
    *) show "Unknown command ${CL_CYAN}$1${CL_NORM}." ;;
  esac
}

###############################################################################

main "$@"
