#!/usr/bin/env bash

###############################################################################

APP=$(basename "$0")
VER="1.6.0"

###############################################################################

NORM=0
BOLD=1
UNLN=4
RED=31
GREEN=32
BROWN=33
BLUE=34
MAG=35
CYAN=36
GREY=37

CL_NORM="\033[${NORM}m"
CL_BOLD="\033[${BOLD}m"
CL_UNLN="\033[${UNLN}m"
CL_RED="\033[${RED}m"
CL_GREEN="\033[${GREEN}m"
CL_BROWN="\033[${BROWN}m"
CL_BLUE="\033[${BLUE}m"
CL_MAG="\033[${MAG}m"
CL_CYAN="\033[${CYAN}m"
CL_GREY="\033[${GREY}m"
CL_BL_RED="\033[${RED};1m"
CL_BL_GREEN="\033[${GREEN};1m"
CL_BL_BROWN="\033[${BROWN};1m"
CL_BL_BLUE="\033[${BLUE};1m"
CL_BL_MAG="\033[${MAG};1m"
CL_BL_CYAN="\033[${CYAN};1m"
CL_BL_GREY="\033[${GREY};1m"
CL_UL_RED="\033[${RED};4m"
CL_UL_GREEN="\033[${GREEN};4m"
CL_UL_BROWN="\033[${BROWN};4m"
CL_UL_BLUE="\033[${BLUE};4m"
CL_UL_MAG="\033[${MAG};4m"
CL_UL_CYAN="\033[${CYAN};4m"
CL_UL_GREY="\033[${GREY};4m"
CL_BG_RED="\033[${RED};7m"
CL_BG_GREEN="\033[${GREEN};7m"
CL_BG_BROWN="\033[${BROWN};7m"
CL_BG_BLUE="\033[${BLUE};7m"
CL_BG_MAG="\033[${MAG};7m"
CL_BG_CYAN="\033[${CYAN};7m"
CL_BG_GREY="\033[${GREY};7m"

###############################################################################

# Path to shell inside container (for debugging)
SHELL_PATH="${SHELL_PATH:-/bin/bash}"

# Path to RPMBuilder utility inside container
RPMBUILDER_PATH="${RPMBUILDER_PATH:-/usr/bin/rpmbuilder}"

# Path to RPMUnbuilder utility inside container
RPMUNBUILDER_PATH="${RPMUNBUILDER_PATH:-/usr/bin/rpmunbuilder}"

# Path to Docker image with RPMBuilder utility
DOCKER_RPMBUILDER_IMAGE="${DOCKER_RPMBUILDER_IMAGE:-gongled/rpmbuilder:7}"

# Shared volume inside container for RPMBuilder/RPMUnbuilder
DOCKER_RPMBUILDER_VOLUME="/rpmbuilder"

# Path to Docker image with Perfecto utility
DOCKER_PERFECTO_IMAGE="${DOCKER_PERFECTO_IMAGE:-essentialkaos/perfecto:centos7}"

# Shared volume for linting specs inside Perfecto container
DOCKER_PERFECTO_VOLUME="/perfecto"

###############################################################################

# Main entrypoint
main() {
  if [[ ! -t 1 || -n "$no_colors" ]] ; then
    unset NORM BOLD UNLN RED GREEN BROWN BLUE MAG CYAN GREY
    unset CL_NORM CL_BOLD CL_UNLN CL_RED CL_GREEN CL_BROWN CL_BLUE CL_MAG CL_CYAN CL_GREY
    unset CL_BL_RED CL_BL_GREEN CL_BL_BROWN CL_BL_BLUE CL_BL_MAG CL_BL_CYAN CL_BL_GREY
    unset CL_UL_RED CL_UL_GREEN CL_UL_BROWN CL_UL_BLUE CL_UL_MAG CL_UL_CYAN CL_UL_GREY
    unset CL_BG_RED CL_BG_GREEN CL_BG_BROWN CL_BG_BLUE CL_BG_MAG CL_BG_CYAN CL_BG_GREY
  fi

  [[ -n "$version" || -n "$ver" ]] && about && doExit
  [[ -n "$help" || -n "$usage" ]] && usage && doExit

  checkDocker
  process "$@"
}

###############################################################################

# Prints coloured message to terminal
#
# 1: Message (String)
#
# Code: No
# Echo: No
show() {
  if [[ -n "$2" && -z "$no_colors" ]] ; then
    echo -e "\033[${2}m${1}\033[0m"
  else
    echo -e "$1"
  fi
}

# Checks if programs are installed
#
# *: List of programs (Array)
#
# Code: Yes
# Echo: No
checkDeps () {
  for app in "$@" ; do
    type "$app" &> /dev/null
    [[ $? -eq 1 ]] && return 1
  done

  return 0
}

# Exits program with a given return code
#
# 1: Exit code (Integer)
#
# Code: Yes
# Echo: No
doExit() {
  exit "${1-0}"
}

###############################################################################

# Shows about message
#
# Code: No
# Echo: Yes
about() {
  show ""
  show "${CL_BL_CYAN}$APP${CL_NORM} ${CL_CYAN}$VER${CL_NORM} - Docker-based RPM building utility"
  show ""
  show "Copyright (C) 2009-$(date +%Y) Gleb E Goncharov <inbox@gongled.ru>" $GREY
  show "MIT" $GREY
  show ""
}

# Shows usage message
#
# Code: No
# Echo: Yes
usage() {
  show ""
  show "${CL_BOLD}Usage:${CL_NORM} $APP ${CL_BROWN}command${CL_NORM} ${CL_BROWN}source${CL_NORM} ${CL_GREEN}<options>${CL_NORM}"
  show ""
  show "${CL_BOLD}Commands:${CL_NORM}"
  show ""
  show "  ${CL_BROWN}p${CL_NORM} or ${CL_BROWN}pack${CL_NORM}             Create RPM package from spec file"
  show "  ${CL_BROWN}u${CL_NORM} or ${CL_BROWN}unpack${CL_NORM}           Unpack source files from SRPM package"
  show "  ${CL_BROWN}c${CL_NORM} or ${CL_BROWN}check${CL_NORM}            Validate spec file using Perfecto"
  show "  ${CL_BROWN}d${CL_NORM} or ${CL_BROWN}debug${CL_NORM}            Run shell command instead of RPMBuilder"
  show "  ${CL_BROWN}h${CL_NORM} or ${CL_BROWN}help${CL_NORM}             Show detailed information about command"
  show ""
  show "See \"$APP help ${CL_BROWN}<command>${CL_NORM}\" for information on a specific command."
  show ""
  show "${CL_BOLD}Examples:${CL_NORM}"
  show ""
  show "  $APP pack htop.spec -V -1"
  show "  $APP unpack htop-2.0.2-0.el7.src.rpm"
  show "  $APP check htop.spec"
  show "  $APP debug htop.spec"
  show ""
}

# Shows usage 'pack' command message
#
# Code: No
# Echo: Yes
usagePack() {
  show ""
  show "${CL_BOLD}Usage:${CL_NORM} $APP pack <spec> <options>"
  show ""
  show "  Create RPM package from spec file."
  show ""
  show "${CL_BOLD}Examples:${CL_NORM}"
  show ""
  show "  $APP pack htop.spec -V -1"
  show ""
}

# Shows usage 'unpack' command message
#
# Code: No
# Echo: Yes
usageUnpack() {
  show ""
  show "${CL_BOLD}Usage:${CL_NORM} $APP unpack <srpm>"
  show ""
  show "  Unpack source files from SRPM package."
  show ""
  show "${CL_BOLD}Examples:${CL_NORM}"
  show ""
  show "  $APP unpack htop-2.0.2-0.el7.src.rpm"
  show ""
}

# Shows usage 'check' command message
#
# Code: No
# Echo: Yes
usageCheck() {
  show ""
  show "${CL_BOLD}Usage:${CL_NORM} $APP check <spec>"
  show ""
  show "  Validate spec file using Perfecto."
  show ""
  show "${CL_BOLD}Examples:${CL_NORM}"
  show ""
  show "  $APP check htop.spec"
  show ""
}

# Shows usage 'debug' command message
#
# Code: No
# Echo: Yes
usageDebug() {
  show ""
  show "${CL_BOLD}Usage:${CL_NORM} $APP debug <spec>"
  show ""
  show "  Run shell instead of RPMBuilder."
  show ""
  show "${CL_BOLD}Examples:${CL_NORM}"
  show ""
  show "  $APP debug htop.spec"
  show ""
}

# Shows usage 'help' command message
#
# Code: No
# Echo: No
usageHelp() {
  show "\nNothing interesting here.\n"
}

###############################################################################

# Checks if Docker is installed
#
# Code: Yes
# Echo: Yes
checkDocker() {
    if ! checkDeps "docker" ; then
        show "You must install docker first." $RED
        doExit 1
    fi
}

# Runs docker container with given command
#
# *: Commands (Array)
#
# Code: Yes
# Echo: Yes
dockerRun() {
  docker run -e LOCAL_USER_ID="$(id -u)" --rm -it "$@"

  return $?
}

# Builds RPM from spec with RPMBuilder
#
# 1: Path to spec file (String) [Optional]
#
# Code: Yes
# Echo: Yes
packCommand() {
    local spec spec_dir spec_name

    spec="$1"

    if [[ -r "$spec" ]] ; then
        spec_dir="$(cd "$(dirname "$spec")" && pwd -P)"
        spec_name=$(basename "$spec")
    fi

    if [[ -n "$spec_dir" ]] ; then
        shift 1
        dockerRun -v "$spec_dir":"$DOCKER_RPMBUILDER_VOLUME" \
                  "$DOCKER_RPMBUILDER_IMAGE" \
                  "$RPMBUILDER_PATH" \
                  "$spec_name" \
                  "$@"
    else
        dockerRun "$DOCKER_RPMBUILDER_IMAGE" \
                  "$RPMBUILDER_PATH" \
                  "$@"
    fi

    return $?
}

# Unpacks source RPM to specified directory
#
# 1: Path to source RPM (String) [Optional]
#
# Code: Yes
# Echo: No
unpackCommand() {
    local srpm srpm_dir srpm_name

    srpm="$1"

    if [[ -r "$srpm" ]] ; then
        srpm_dir="$(cd "$(dirname "$srpm")" && pwd -P)"
        srpm_name=$(basename "$srpm")
    fi

    if [[ -n "$srpm_dir" ]] ; then
        shift 1
        dockerRun -v "$srpm_dir":"$DOCKER_RPMBUILDER_VOLUME" \
                  "$DOCKER_RPMBUILDER_IMAGE" \
                  "$RPMUNBUILDER_PATH" \
                  "$srpm_name" \
                  "$@"
    else
        dockerRun "$DOCKER_RPMBUILDER_IMAGE" \
                  "$RPMUNBUILDER_PATH" \
                  "$@"
    fi

    return $?
}

# Executes shell inside container for debugging
#
# 1: Path to spec file (String) [Optional]
#
# Code: Yes
# Echo: Yes
debugCommand() {
    local spec spec_dir spec_name

    spec="$1"

    if [[ -r "$spec" ]] ; then
        spec_dir="$(cd "$(dirname "$spec")" && pwd -P)"
    else
        spec_dir="$(pwd)"
    fi

    dockerRun -v "$spec_dir":"$DOCKER_RPMBUILDER_VOLUME" \
              "$DOCKER_RPMBUILDER_IMAGE" \
              "$SHELL_PATH"

    return $?
}

# Runs Perfecto linter
#
# 1: Path to spec file (String)
#
# Code: Yes
# Echo: Yes
checkCommand() {
    local spec spec_dir spec_name

    spec="$1"

    if [[ -r "$spec" ]] ; then
        spec_dir="$(cd "$(dirname "$spec")" && pwd -P)"
        spec_name=$(basename "$spec")
    fi

    if [[ -n "$spec_dir" ]] ; then
        shift
        docker run --rm -it -v "$spec_dir":"$DOCKER_PERFECTO_VOLUME" "$DOCKER_PERFECTO_IMAGE" "$spec_name" "$@"
    else
        docker run --rm -it "$DOCKER_PERFECTO_IMAGE" "$@"
    fi

    return $?
}

# Prints help menu
#
# 1: Command name (String)
#
# Code: Yes
# Echo: Yes
helpCommand() {
  case "$1" in
      "p"|"pack")
          usagePack
          ;;
      "u"|"unpack")
          usageUnpack
          ;;
      "c"|"check")
          usageCheck
          ;;
      "d"|"debug")
          usageDebug
          ;;
      "h"|"help")
          usageHelp
          ;;
      *)
          usage
          ;;
  esac

  doExit
}

# Run process
#
# *: Command with arguments (Array) [Optional]
#
# Code: Yes
# Echo: Yes
process() {
    local cmd

    cmd="$1"
    shift

    case $cmd in
        "p"|"pack")
            packCommand "$@"
            ;;
        "u"|"unpack")
            unpackCommand "$@"
            ;;
        "c"|"check")
            checkCommand "$@"
            ;;
        "d"|"debug")
            debugCommand "$@"
            ;;
        *)
            helpCommand "$@"
            doExit
            ;;
    esac

    doExit $?
}

###############################################################################

main "$@"
